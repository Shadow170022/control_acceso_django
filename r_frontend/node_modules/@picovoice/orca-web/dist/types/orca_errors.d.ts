import { PvError } from "@picovoice/web-utils";
import { PvStatus } from "./types";
declare class OrcaError extends Error {
    private readonly _status;
    private readonly _shortMessage;
    private readonly _messageStack;
    constructor(status: PvStatus, message: string, messageStack?: string[], pvError?: PvError | null);
    get status(): PvStatus;
    get shortMessage(): string;
    get messageStack(): string[];
    private static errorToString;
}
declare class OrcaOutOfMemoryError extends OrcaError {
    constructor(message: string, messageStack?: string[], pvError?: PvError | null);
}
declare class OrcaIOError extends OrcaError {
    constructor(message: string, messageStack?: string[], pvError?: PvError | null);
}
declare class OrcaInvalidArgumentError extends OrcaError {
    constructor(message: string, messageStack?: string[], pvError?: PvError | null);
}
declare class OrcaStopIterationError extends OrcaError {
    constructor(message: string, messageStack?: string[], pvError?: PvError | null);
}
declare class OrcaKeyError extends OrcaError {
    constructor(message: string, messageStack?: string[], pvError?: PvError | null);
}
declare class OrcaInvalidStateError extends OrcaError {
    constructor(message: string, messageStack?: string[], pvError?: PvError | null);
}
declare class OrcaRuntimeError extends OrcaError {
    constructor(message: string, messageStack?: string[], pvError?: PvError | null);
}
declare class OrcaActivationError extends OrcaError {
    constructor(message: string, messageStack?: string[], pvError?: PvError | null);
}
declare class OrcaActivationLimitReachedError extends OrcaError {
    constructor(message: string, messageStack?: string[], pvError?: PvError | null);
}
declare class OrcaActivationThrottledError extends OrcaError {
    constructor(message: string, messageStack?: string[], pvError?: PvError | null);
}
declare class OrcaActivationRefusedError extends OrcaError {
    constructor(message: string, messageStack?: string[], pvError?: PvError | null);
}
export { OrcaError, OrcaOutOfMemoryError, OrcaIOError, OrcaInvalidArgumentError, OrcaStopIterationError, OrcaKeyError, OrcaInvalidStateError, OrcaRuntimeError, OrcaActivationError, OrcaActivationLimitReachedError, OrcaActivationThrottledError, OrcaActivationRefusedError, };
export declare function pvStatusToException(pvStatus: PvStatus, errorMessage: string, messageStack?: string[], pvError?: PvError | null): OrcaError;
//# sourceMappingURL=orca_errors.d.ts.map